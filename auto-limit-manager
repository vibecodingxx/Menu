#!/bin/bash

# ==========================================
# Auto Limit Manager - All-in-One Script
# ==========================================
# This script automatically:
# 1. Sets IP limits for all users (max 2 IPs)
# 2. Sets quota limits for all users (1000GB)
# 3. Enables auto-kill for multilogin violations
# 4. Applies to SSH, VMess, VLess, and Trojan users
# ==========================================

# Color definitions
RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LIGHT='\033[0;37m'
yellow="\033[0;33m"
ungu="\033[0;35m"
Red="\033[91;1m"
Cyan="\033[96;1m"
Xark="\033[0m"
BlueCyan="\033[5;36m"
WhiteBe="\033[5;37m"
GreenBe="\033[5;32m"
YellowBe="\033[5;33m"
BlueBe="\033[5;34m"

# Configuration
MAX_IP_LIMIT=2
QUOTA_GB=1000
AUTOKILL_INTERVAL=1  # minutes

# Get server name
nama=$(cat /etc/xray/username 2>/dev/null || echo "Server")

# ==========================================
# Utility Functions
# ==========================================

function baris_panjang() {
    echo -e "${BlueCyan} ——————————————————————————————————— ${Xark}"
}

function Banner() {
    clear
    baris_panjang
    echo -e "${ungu}           $nama      ${Xark}"
    baris_panjang
}

function Loading_Animation() {
    local duration=2
    local frames=("██10%" "█████35%" "█████████65%" "█████████████80%" "█████████████████████90%" "█████████████████████████100%")
    local num_frames=${#frames[@]}
    
    for ((i = 0; i < duration; i++)); do
        clear
        local index=$((i % num_frames))
        local color_code=$((31 + i % 7))
        echo ""
        echo ""
        echo -e "\e[1;${color_code}m ${frames[$index]}\e[0m"
        sleep 0.5
    done
}

function Loading_Success() {
    clear
    echo -e "\033[5;32mSuccess\033[0m"
    sleep 1
    clear
}

function log_message() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" >> /root/auto-limit-manager.log
    echo -e "${GreenBe}[INFO]${Xark} $message"
}

function error_message() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] ERROR: $message" >> /root/auto-limit-manager.log
    echo -e "${Red}[ERROR]${Xark} $message"
}

# ==========================================
# IP Limit Management
# ==========================================

function setup_ip_limits() {
    log_message "Setting up IP limits for all users..."
    
    # Create IP limit directory if it doesn't exist
    mkdir -p /etc/kyt/limit/ssh/ip
    
    # Get all SSH users
    local ssh_users=$(cat /etc/passwd | grep "/home/" | cut -d":" -f1 2>/dev/null)
    
    for user in $ssh_users; do
        if [[ -n "$user" ]]; then
            echo "$MAX_IP_LIMIT" > "/etc/kyt/limit/ssh/ip/$user"
            log_message "Set IP limit for $user: $MAX_IP_LIMIT"
        fi
    done
    
    # Get all Xray users (VMess, VLess, Trojan)
    local xray_users=$(grep -E "^### |^#& |^#! " "/etc/xray/config.json" | cut -d ' ' -f 2 2>/dev/null)
    
    for user in $xray_users; do
        if [[ -n "$user" ]]; then
            echo "$MAX_IP_LIMIT" > "/etc/kyt/limit/ssh/ip/$user"
            log_message "Set IP limit for Xray user $user: $MAX_IP_LIMIT"
        fi
    done
    
    log_message "IP limits configured for all users"
}

# ==========================================
# Quota Management
# ==========================================

function setup_ssh_quotas() {
    log_message "Setting up SSH quotas..."
    
    # Create SSH quota directory if it doesn't exist
    mkdir -p /etc/ssh
    
    # Get all SSH users
    local ssh_users=$(cat /etc/passwd | grep "/home/" | cut -d":" -f1 2>/dev/null)
    
    for user in $ssh_users; do
        if [[ -n "$user" ]]; then
            # Convert GB to bytes
            local quota_bytes=$((QUOTA_GB * 1024 * 1024 * 1024))
            echo "$quota_bytes" > "/etc/ssh/$user"
            log_message "Set SSH quota for $user: $QUOTA_GB GB"
        fi
    done
}

function setup_vmess_quotas() {
    log_message "Setting up VMess quotas..."
    
    # Create VMess quota directory if it doesn't exist
    mkdir -p /etc/vmess
    
    # Get all VMess users
    local vmess_users=$(grep -E "^### " "/etc/xray/config.json" | cut -d ' ' -f 2 2>/dev/null)
    
    for user in $vmess_users; do
        if [[ -n "$user" ]]; then
            # Convert GB to bytes
            local quota_bytes=$((QUOTA_GB * 1024 * 1024 * 1024))
            echo "$quota_bytes" > "/etc/vmess/$user"
            log_message "Set VMess quota for $user: $QUOTA_GB GB"
        fi
    done
}

function setup_vless_quotas() {
    log_message "Setting up VLess quotas..."
    
    # Create VLess quota directory if it doesn't exist
    mkdir -p /etc/vless
    
    # Get all VLess users
    local vless_users=$(grep -E "^#& " "/etc/xray/config.json" | cut -d ' ' -f 2 2>/dev/null)
    
    for user in $vless_users; do
        if [[ -n "$user" ]]; then
            # Convert GB to bytes
            local quota_bytes=$((QUOTA_GB * 1024 * 1024 * 1024))
            echo "$quota_bytes" > "/etc/vless/$user"
            log_message "Set VLess quota for $user: $QUOTA_GB GB"
        fi
    done
}

function setup_trojan_quotas() {
    log_message "Setting up Trojan quotas..."
    
    # Create Trojan quota directory if it doesn't exist
    mkdir -p /etc/trojan
    
    # Get all Trojan users
    local trojan_users=$(grep -E "^#! " "/etc/xray/config.json" | cut -d ' ' -f 2 2>/dev/null)
    
    for user in $trojan_users; do
        if [[ -n "$user" ]]; then
            # Convert GB to bytes
            local quota_bytes=$((QUOTA_GB * 1024 * 1024 * 1024))
            echo "$quota_bytes" > "/etc/trojan/$user"
            log_message "Set Trojan quota for $user: $QUOTA_GB GB"
        fi
    done
}

# ==========================================
# Auto-Kill Setup
# ==========================================

function setup_autokill() {
    log_message "Setting up auto-kill cron job..."
    
    # Create cron file for auto-kill
    cat > /etc/cron.d/limitssh-ip << EOF
# AutoKill - Multilogin Monitor
*/${AUTOKILL_INTERVAL} * * * * root /usr/local/sbin/tendang $MAX_IP_LIMIT
EOF
    
    # Make sure tendang script is executable
    chmod +x /usr/local/sbin/tendang 2>/dev/null
    
    # Restart cron service
    systemctl restart cron >/dev/null 2>&1
    
    log_message "Auto-kill cron job configured (every $AUTOKILL_INTERVAL minute(s))"
}

# ==========================================
# Service Management
# ==========================================

function restart_services() {
    log_message "Restarting services..."
    
    # Restart SSH services
    systemctl restart ssh >/dev/null 2>&1
    systemctl restart sshd >/dev/null 2>&1
    systemctl restart dropbear >/dev/null 2>&1
    
    # Restart Xray if it exists
    if systemctl is-active --quiet xray; then
        systemctl restart xray >/dev/null 2>&1
        log_message "Xray service restarted"
    fi
    
    log_message "All services restarted"
}

# ==========================================
# Database Update
# ==========================================

function update_databases() {
    log_message "Updating user databases..."
    
    # Update SSH database
    if [[ -f /etc/ssh/.ssh.db ]]; then
        # Update quota and IP limit for existing users
        local ssh_users=$(cat /etc/passwd | grep "/home/" | cut -d":" -f1 2>/dev/null)
        for user in $ssh_users; do
            if [[ -n "$user" ]]; then
                # Remove old entry and add new one with updated quota and IP limit
                sed -i "/\b${user}\b/d" /etc/ssh/.ssh.db 2>/dev/null
                # Note: We can't add new entries without password/expiry info
                log_message "Updated SSH database for $user"
            fi
        done
    fi
    
    # Update Trojan database
    if [[ -f /etc/trojan/.trojan.db ]]; then
        local trojan_users=$(grep -E "^#! " "/etc/xray/config.json" | cut -d ' ' -f 2 2>/dev/null)
        for user in $trojan_users; do
            if [[ -n "$user" ]]; then
                sed -i "/\b${user}\b/d" /etc/trojan/.trojan.db 2>/dev/null
                log_message "Updated Trojan database for $user"
            fi
        done
    fi
    
    log_message "User databases updated"
}

# ==========================================
# Status Check
# ==========================================

function check_status() {
    log_message "Checking current status..."
    
    echo -e "${Cyan}Current Configuration Status:${Xark}"
    baris_panjang
    
    # Check IP limits
    echo -e "${YellowBe}IP Limits:${Xark}"
    local ip_limit_count=$(ls /etc/kyt/limit/ssh/ip/ 2>/dev/null | wc -l)
    echo -e "  Users with IP limits: $ip_limit_count"
    
    # Check quotas
    echo -e "${YellowBe}Quota Limits:${Xark}"
    local ssh_quota_count=$(ls /etc/ssh/ 2>/dev/null | grep -v ".ssh.db" | wc -l)
    local vmess_quota_count=$(ls /etc/vmess/ 2>/dev/null | wc -l)
    local vless_quota_count=$(ls /etc/vless/ 2>/dev/null | wc -l)
    local trojan_quota_count=$(ls /etc/trojan/ 2>/dev/null | grep -v ".trojan.db" | wc -l)
    
    echo -e "  SSH users: $ssh_quota_count"
    echo -e "  VMess users: $vmess_quota_count"
    echo -e "  VLess users: $vless_quota_count"
    echo -e "  Trojan users: $trojan_quota_count"
    
    # Check auto-kill
    echo -e "${YellowBe}Auto-Kill:${Xark}"
    if [[ -f /etc/cron.d/limitssh-ip ]]; then
        echo -e "  Status: ${GreenBe}ENABLED${Xark}"
        echo -e "  Interval: Every $AUTOKILL_INTERVAL minute(s)"
    else
        echo -e "  Status: ${Red}DISABLED${Xark}"
    fi
    
    baris_panjang
}

# ==========================================
# Main Execution
# ==========================================

function main() {
    Banner
    echo -e "${GreenBe}Auto Limit Manager - All-in-One Configuration${Xark}"
    echo -e ""
    echo -e "${Cyan}This script will automatically configure:${Xark}"
    echo -e "  • IP limits: Maximum $MAX_IP_LIMIT IPs per user"
    echo -e "  • Quota limits: $QUOTA_GB GB per user"
    echo -e "  • Auto-kill: Every $AUTOKILL_INTERVAL minute(s)"
    echo -e "  • Applies to: SSH, VMess, VLess, and Trojan users"
    echo -e ""
    echo -e "${YellowBe}Press Enter to continue or Ctrl+C to cancel...${Xark}"
    read -r
    
    log_message "Starting Auto Limit Manager configuration..."
    
    # Execute all configurations
    setup_ip_limits
    setup_ssh_quotas
    setup_vmess_quotas
    setup_vless_quotas
    setup_trojan_quotas
    setup_autokill
    update_databases
    restart_services
    
    Loading_Animation
    Loading_Success
    
    # Show final status
    check_status
    
    echo -e ""
    echo -e "${GreenBe}Configuration completed successfully!${Xark}"
    echo -e "${Cyan}All users now have:${Xark}"
    echo -e "  • Maximum $MAX_IP_LIMIT concurrent connections"
    echo -e "  • $QUOTA_GB GB bandwidth quota"
    echo -e "  • Automatic multilogin monitoring"
    echo -e ""
    echo -e "${YellowBe}Log file: /root/auto-limit-manager.log${Xark}"
    echo -e ""
    baris_panjang
}

# ==========================================
# Script Entry Point
# ==========================================

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    echo -e "${Red}This script must be run as root${NC}"
    exit 1
fi

# Run main function
main